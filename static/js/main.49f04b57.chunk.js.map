{"version":3,"sources":["calculator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Deposit","dateStr","amount","date","this","Date","currentDate","deposits","weeklyRate","data","map","d","deposit","push","sum","forEach","weeksSince","getTime","Math","pow","Container","styled","div","CurrentBalanceContainer","InterestRate","DepositsContainer","App","React","useState","calculator","balance","i","key","toLocaleDateString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUACMA,EAGJ,WAAYC,EAAiBC,GAAiB,yBAF9CC,UAE6C,OAD7CD,YAC6C,EAC3CE,KAAKD,KAAO,IAAIE,KAAKJ,GACrBG,KAAKF,OAASA,GA4BH,M,WArBb,aAAe,yBAHfI,YAAoB,IAAID,KAGV,KAFdE,cAEc,OADdC,gBACc,EACZJ,KAAKG,SAAWE,EAAKF,SAASG,KAAI,SAAAC,GAAC,OAAI,IAAIX,EAAQW,EAAER,KAAMQ,EAAET,WAC7DE,KAAKI,WAAaC,EAAKD,W,uDAcdI,GACTR,KAAKG,SAASM,KAAKD,K,8BAZS,IAAD,OACvBE,EAAM,EAOV,OANAV,KAAKG,SAASQ,SAAQ,SAAAJ,GACpB,IAAMK,GACH,EAAKV,YAAYW,UAAYN,EAAER,KAAKc,WAArC,OAEFH,GAAOH,EAAET,OAASgB,KAAKC,IAAI,EAAIV,EAAKD,WAAa,IAAKQ,MAEjDF,M,iaCrBX,IAAMM,EAAYC,IAAOC,IAAV,KAMTC,EAA0BF,IAAOC,IAAV,KACvBE,EAAeH,IAAOC,IAAV,KACZG,EAAoBJ,IAAOC,IAAV,KACjBtB,EAAUqB,IAAOC,IAAV,KAqBEI,MAnBf,WAAgB,IAAD,EACiBC,IAAMC,SAASC,EAAWC,SAD3C,mBACNA,EADM,KAEb,OAFa,KAGX,kBAACV,EAAD,KACE,kBAACG,EAAD,yBACoBO,GAEpB,kBAACN,EAAD,eAAkBK,EAAWrB,WAA7B,MACA,kBAACiB,EAAD,KACGI,EAAWtB,SAASG,KAAI,SAACC,EAAGoB,GAAJ,OACvB,kBAAC,EAAD,CAASC,IAAKD,GAAd,kBACEpB,EAAET,OADJ,mBAEWS,EAAER,KAAK8B,mBAAmB,iBChB3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.49f04b57.chunk.js","sourcesContent":["import data from \"./data.json\";\r\nclass Deposit {\r\n  date: Date;\r\n  amount: number;\r\n  constructor(dateStr: string, amount: number) {\r\n    this.date = new Date(dateStr);\r\n    this.amount = amount;\r\n  }\r\n}\r\nclass Calculator {\r\n  currentDate: Date = new Date();\r\n  deposits: Deposit[];\r\n  weeklyRate: number;\r\n  constructor() {\r\n    this.deposits = data.deposits.map(d => new Deposit(d.date, d.amount));\r\n    this.weeklyRate = data.weeklyRate;\r\n  }\r\n\r\n  public get balance(): number {\r\n    let sum = 0;\r\n    this.deposits.forEach(d => {\r\n      const weeksSince =\r\n        (this.currentDate.getTime() - d.date.getTime()) /\r\n        (1000 * 3600 * 24 * 7);\r\n      sum += d.amount * Math.pow(1 + data.weeklyRate / 100, weeksSince);\r\n    });\r\n    return sum;\r\n  }\r\n\r\n  addDeposit(deposit: Deposit) {\r\n    this.deposits.push(deposit);\r\n  }\r\n}\r\n\r\nexport default new Calculator();\r\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport calculator from \"./calculator\";\n\nconst Container = styled.div`\n  background-color: #282c34;\n  height: 100%;\n  color: white;\n`;\n\nconst CurrentBalanceContainer = styled.div``;\nconst InterestRate = styled.div``;\nconst DepositsContainer = styled.div``;\nconst Deposit = styled.div``;\n\nfunction App() {\n  const [balance, setBalance] = React.useState(calculator.balance);\n  return (\n    <Container>\n      <CurrentBalanceContainer>\n        Current Balance: {balance}\n      </CurrentBalanceContainer>\n      <InterestRate>{`${calculator.weeklyRate}%`}</InterestRate>\n      <DepositsContainer>\n        {calculator.deposits.map((d, i) => (\n          <Deposit key={i}>{`Amount: ${\n            d.amount\n          }, Date: ${d.date.toLocaleDateString(\"en-US\")}`}</Deposit>\n        ))}\n      </DepositsContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}